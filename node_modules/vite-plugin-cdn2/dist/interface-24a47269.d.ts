import { FilterPattern } from '@rollup/pluginutils';
import { HtmlTagDescriptor } from 'vite';

type HTMLTagDescriptor = Pick<HtmlTagDescriptor, 'injectTo' | 'attrs'> & {
    attrs?: ScriptAttributes;
};
interface SetupContext {
    extra: IIFEModuleInfo;
}
type SetupResult = {
    url: string;
} & HTMLTagDescriptor;
interface ResolveOptions {
    name: string;
    setup(ctx: SetupContext): SetupResult;
}
declare function defineResolve(opts: ResolveOptions): ResolveOptions;
declare function defineScript(opts: ScriptSpare): ScriptSpare;
declare function defineLink(opts: LinkSpare): LinkSpare;

type ScriptAttributes = Partial<Pick<HTMLScriptElement, 'async' | 'crossOrigin' | 'defer' | 'integrity' | 'noModule' | 'nonce' | 'referrerPolicy' | 'type'>>;
type LinkAttrobites = Partial<Pick<HTMLLinkElement, 'as' | 'crossOrigin' | 'hreflang' | 'imageSizes' | 'imageSrcset' | 'integrity' | 'media' | 'referrerPolicy' | 'rel' | 'title' | 'type'>>;
type ScriptSpare = ScriptAttributes & {
    url: string;
};
type LinkSpare = LinkAttrobites & {
    url: string;
};
interface Module {
    name: string;
    global?: string;
}
interface TrackModule extends Module {
    spare?: Array<ScriptSpare | LinkSpare> | string;
    relativeModule?: string;
    aliases?: Array<string>;
}
interface IIFEModuleInfo extends TrackModule {
    version: string;
    unpkg?: string;
    jsdelivr?: string;
}
interface ModuleInfo extends IIFEModuleInfo {
    bindings: Set<string>;
    code?: string;
}
type IModule = TrackModule;
type ExternalModule = Required<Module> & {
    aliases?: Array<string>;
};
type Pretty<T> = {
    [key in keyof T]: T[key] extends (...args: any[]) => any ? (...args: Parameters<T[key]>) => ReturnType<T[key]> : T[key] & NonNullable<unknown>;
} & NonNullable<unknown>;
type CDNPluginOptions = Pretty<{
    modules?: Array<IModule | string>;
    include?: FilterPattern;
    exclude?: FilterPattern;
    logLevel?: 'slient' | 'warn';
    resolve?: ResolveOptions;
    apply?: 'build' | 'serve';
}>;
type ExternalPluginOptions = Pretty<{
    modules?: Array<ExternalModule>;
    include?: FilterPattern;
    exclude?: FilterPattern;
}>;

export { CDNPluginOptions as C, ExternalPluginOptions as E, HTMLTagDescriptor as H, IModule as I, ModuleInfo as M, ResolveOptions as R, SetupResult as S, TrackModule as T, defineLink as a, ExternalModule as b, Module as c, defineScript as d, defineResolve as e };
